import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import io
import base64
from datetime import datetime

# Set backend to avoid GUI window
plt.switch_backend('Agg')

def prepare_trend_data(df: pd.DataFrame) -> pd.DataFrame:
    """Prepare vulnerability trend data by scan date and severity."""
    df = df.copy()
    
    # Convert and extract date components
    df['scan_date'] = pd.to_datetime(df['Plugin Modification Date'], errors='coerce')
    df = df.dropna(subset=['scan_date'])
    df['date'] = df['scan_date'].dt.date  # Extract just the date part
    
    # Standardize severity levels
    severity_order = ['Critical', 'High', 'Medium', 'Low', 'Info']
    df['Severity'] = pd.Categorical(df['Severity'], categories=severity_order, ordered=True)
    
    # Count vulnerabilities by date and severity
    trend_data = df.groupby(['date', 'Severity']).size().unstack(fill_value=0)
    
    # Fill missing dates with 0 counts
    date_range = pd.date_range(start=df['date'].min(), end=df['date'].max())
    trend_data = trend_data.reindex(date_range, fill_value=0)
    
    return trend_data

async def display_vulnerability_trend(records: list) -> dict:
    """Generate a line chart showing vulnerability trends over time."""
    if not records:
        return {"message": "No records found"}

    df = pd.DataFrame(records)
    if df.empty:
        return {"message": "Data is empty"}

    # Prepare trend data
    trend_data = prepare_trend_data(df)
    
    # Create visualization
    plt.figure(figsize=(12, 6))
    
    # Define colors for each severity level
    severity_colors = {
        'Critical': '#ff4757',
        'High': '#ff6348',
        'Medium': '#ffa502',
        'Low': '#2ed573',
        'Info': '#576574'
    }
    
    # Plot each severity level
    for severity in trend_data.columns:
        plt.plot(
            trend_data.index,
            trend_data[severity],
            label=severity,
            color=severity_colors[severity],
            marker='o',
            markersize=6,
            linewidth=2.5
        )
    
    # Customize plot
    plt.title('Vulnerability Trend Over Time', pad=20, fontsize=14)
    plt.xlabel('Scan Date', labelpad=10, fontsize=12)
    plt.ylabel('Vulnerability Count', labelpad=10, fontsize=12)
    
    # Format x-axis dates
    plt.gca().xaxis.set_major_formatter(plt.matplotlib.dates.DateFormatter('%Y-%m-%d'))
    plt.gca().xaxis.set_major_locator(plt.matplotlib.dates.AutoDateLocator())
    plt.gcf().autofmt_xdate()  # Rotate date labels
    
    # Add legend and grid
    plt.legend(title='Severity', bbox_to_anchor=(1.05, 1), loc='upper left')
    plt.grid(True, linestyle='--', alpha=0.7)
    
    plt.tight_layout()
    
    # Save image to buffer
    buffer = io.BytesIO()
    plt.savefig(buffer, format='png', dpi=120, bbox_inches='tight')
    buffer.seek(0)
    image_base64 = base64.b64encode(buffer.read()).decode('utf-8')
    buffer.close()
    plt.close()
    
    # Prepare response data
    return {
        "type": "image",
        "graph": image_base64
    }
    
    
    
    
    
    
    
    
    
    
    
    
    
#################################### 8(b) CODE ####################################

# import pandas as pd
# import matplotlib.pyplot as plt
# import seaborn as sns
# import io
# import base64

# plt.switch_backend('Agg')

# async def display_vulnerability_trend(records):
#     if not records:
#         return {"message": "No records found"}

#     df = pd.DataFrame(records)
#     if df.empty or 'Plugin Modification Date' not in df.columns:
#         return {"message": "Required column not found"}

#     df['Plugin Modification Date'] = pd.to_datetime(df['Plugin Modification Date'], errors='coerce')
#     df = df.dropna(subset=['Plugin Modification Date'])

#     # Group by date and count vulnerabilities
#     df['Date'] = df['Plugin Modification Date'].dt.date
#     trend = df.groupby('Date').size().reset_index(name='Vulnerability Count')

#     # Plot line chart
#     fig, ax = plt.subplots(figsize=(10, 6))
#     sns.lineplot(x='Date', y='Vulnerability Count', data=trend, marker='o', ax=ax)
#     ax.set_title("Vulnerability Trend Over Time")
#     ax.set_xlabel("Date")
#     ax.set_ylabel("Vulnerability Count")
#     plt.xticks(rotation=45)
#     plt.tight_layout()

#     buffer = io.BytesIO()
#     plt.savefig(buffer, format='png')
#     buffer.seek(0)
#     image_base64 = base64.b64encode(buffer.read()).decode('utf-8')
#     buffer.close()

#     return {
#         "intent": "display_vulnerability_trend",
#         "type": "image",
#         "plot_type": "line",
#         "title": "Vulnerability Trend Over Time",
#         "image_base64": image_base64
#     }
