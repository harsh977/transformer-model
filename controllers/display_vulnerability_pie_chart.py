import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import io
import base64

# Ensure no GUI errors
plt.switch_backend("Agg")

async def display_vulnerability_pie_chart(records):
    # Convert MongoDB records to DataFrame
    df = pd.DataFrame(records)

    # Prepare the latest record per asset
    df['datetime'] = pd.to_datetime(df['Plugin Modification Date'], errors='coerce')
    df = df.dropna(subset=['datetime'])
    df['asset_id'] = df['IP Address'].astype(str) + ":" + df['Port'].astype(str)
    latest_df = df.sort_values('datetime').groupby('asset_id').tail(1)

    # Group by severity
    severity_counts = latest_df['Severity'].value_counts()

    # Plot pie as donut
    fig, ax = plt.subplots(figsize=(8,8))
    colors = sns.color_palette('pastel', n_colors=len(severity_counts))

    wedges, texts = ax.pie(
        severity_counts,
        labels=severity_counts.index,
        colors=colors,
        startangle=140,
        wedgeprops={'edgecolor': 'white', 'linewidth': 1},
        radius=1.0
    )

    # Draw center circle for donut effect
    centre_circle = plt.Circle((0, 0), 0.6, fc='white')
    fig.gca().add_artist(centre_circle)

    ax.set_title("Vulnerabilities by Severity")

    # Add legend to avoid cramped labels
    ax.legend(
        labels=[f"{label}: {count}" for label, count in zip(severity_counts.index, severity_counts.values)],
        loc="center left",
        bbox_to_anchor=(1, 0.5)
    )

    # Save to buffer
    buffer = io.BytesIO()
    plt.savefig(buffer, format='png', bbox_inches='tight')
    buffer.seek(0)
    image_base64 = base64.b64encode(buffer.read()).decode('utf-8')
    buffer.close()

    return {
        "type": "image",
        "title": "Vulnerability Severity Distribution",
        "graph": image_base64
    }
