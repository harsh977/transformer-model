import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import io
import base64
from datetime import datetime

# Function to get only the latest unique vulnerability records
def get_latest_assets(df: pd.DataFrame) -> pd.DataFrame:
    df = df.copy()
    df['Plugin Modification Date'] = pd.to_datetime(df['Plugin Modification Date'], errors='coerce')
    df = df.dropna(subset=['Plugin Modification Date'])

    df['vuln_id'] = df['IP Address'] + "|" + df['Port'].astype(str) + "|" + df['Plugin'].astype(str)
    df = df.sort_values(by='Plugin Modification Date', ascending=False)
    return df.drop_duplicates(subset=['vuln_id'], keep='first')

# Main function to generate progress visualization
async def show_vulnerability_remediation_progress(records: list) -> dict:
    if not records:
        return {"message": "No records found"}

    df = pd.DataFrame(records)
    if df.empty:
        return {"message": "Data is empty"}

    df = get_latest_assets(df)

    # Filter only accepted severity levels
    valid_severities = ['Critical', 'High', 'Medium', 'Low']
    df = df[df['Severity'].isin(valid_severities)]

    # Convert to date and group by month
    df['Date'] = pd.to_datetime(df['Plugin Modification Date']).dt.to_period("M").dt.to_timestamp()

    # Group by date and severity
    daily_counts = df.groupby(['Date', 'Severity']).size().unstack(fill_value=0)

    # Ensure all severities are represented
    for sev in valid_severities:
        if sev not in daily_counts.columns:
            daily_counts[sev] = 0

    daily_counts = daily_counts[valid_severities]  # Ensure order
    cumulative_counts = daily_counts.sort_index().cumsum()

    # Plot cumulative stacked area chart
    plt.figure(figsize=(12, 6))
    cumulative_counts.plot.area(
        stacked=True,
        color={
            'Critical': '#8B0000',
            'High': '#FF4500',
            'Medium': '#FFA500',
            'Low': '#FFFF00'
        },
        alpha=0.7,
        linewidth=0.5
    )

    plt.title('Vulnerability Trend Over Time (Latest Scan Data)')
    plt.xlabel('Date')
    plt.ylabel('Cumulative Vulnerabilities')
    plt.legend(title='Severity')
    plt.grid(True, linestyle='--', alpha=0.5)
    plt.tight_layout()

    # Encode plot image
    buffer = io.BytesIO()
    plt.savefig(buffer, format='png', dpi=120)
    buffer.seek(0)
    progress_image = base64.b64encode(buffer.read()).decode('utf-8')
    buffer.close()
    plt.close()

    # Current vulnerability counts
    current_vulns = cumulative_counts.iloc[-1].to_dict()
    current_vulns = {k: int(v) for k, v in current_vulns.items()}

    return {
        "type": "image",
        "graph": progress_image
    }
