import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import io
import base64

plt.switch_backend('Agg')

def get_latest_assets(df: pd.DataFrame) -> pd.DataFrame:
    df = df.copy()
    df['Plugin Modification Date'] = pd.to_datetime(df['Plugin Modification Date'], errors='coerce')
    df = df.dropna(subset=['Plugin Modification Date'])
    df = df.sort_values(by='Plugin Modification Date', ascending=False)
    latest_df = df.drop_duplicates(subset=['IP Address', 'Port'], keep='first')
    return latest_df

async def show_vulnerability_severity_counts(records):
    if not records:
        return {"message": "No records found"}

    df = pd.DataFrame(records)
    if df.empty:
        return {"message": "Data is empty"}

    df = get_latest_assets(df)

    if 'Severity' not in df.columns:
        return {"message": "Severity column not found in data"}

    severity_order = ['None', 'Low', 'Medium', 'High', 'Critical']  # Optional custom order
    severity_counts = df['Severity'].value_counts().reindex(severity_order, fill_value=0)

    fig, ax = plt.subplots(figsize=(8, 5))
    sns.barplot(x=severity_counts.index, y=severity_counts.values, palette='coolwarm', ax=ax)
    ax.set_title("Vulnerability Count by Severity")
    ax.set_xlabel("Severity")
    ax.set_ylabel("Count")
    plt.tight_layout()

    buffer = io.BytesIO()
    plt.savefig(buffer, format='png')
    buffer.seek(0)
    image_base64 = base64.b64encode(buffer.read()).decode('utf-8')
    buffer.close()

    return {
        "type": "image",
        "graph": image_base64
    }
